/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/
#include "stm32l1xx.h"
#include "stm32l1xx_gpio.h"
#include "stm32l1xx_rcc.h"
#include "stm32l1xx_nucleo.h"
#include "stm32l1xx_adc.h"

#define A0 GPIO_Pin_0
uint8_t SysClockSource;

static __IO uint32_t TimingDelay;		// Variable to store desired delay
GPIO_InitTypeDef GPIOPortA;  //Structure variable to save configuration settings for Port A
RCC_ClocksTypeDef RCC_Clocks;
			
void Init(void)
{
	RCC_GetClocksFreq(&RCC_Clocks);

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE); // Enable clock for port A
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE); // Enable clock for ADC 1

	GPIO_StructInit(&GPIOPortA);	// Fill the variable with default settings
	GPIOPortA.GPIO_Pin = A0;
	GPIOPortA.GPIO_Mode = GPIO_Mode_AN;
	GPIOPortA.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIOPortA);

	ADC_DeInit(ADC1);

	if (SysTick_Config(SystemCoreClock / 1000))
	{
			while(1);
	}
}

void Delay(uint32_t nTime)
{
	TimingDelay = nTime;			// Set the TimingDelay to nTime (in ms)
	while(TimingDelay != 0);		// Wait until TimingDelay gets reduced to 0 by SysTick_Handler()
}

int main(void)
{
	Init();

	while(1)
	{

	}
}

void SysTick_Handler(void)    // Handle the SysTick interrupt that goes every 1ms
{
	if(TimingDelay != 0x00)
	{
		TimingDelay--;			// Reduce the TimingDelay variable with 1 every 1ms
	}
}
